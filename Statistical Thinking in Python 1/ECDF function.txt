Computing the ECDF (Empirical cumulative distribution function)
In this exercise, you will write a function that takes as input a 1D array of data and then returns the x and y values of the ECDF. You will use this function over and over again throughout this course and its sequel. ECDFs are among the most important plots in statistical analysis. You can write your own function, foo(x,y) according to the following skeleton:

def foo(a,b):
    """State what function does here"""
    # Computation performed here
    return x, y
The function foo() above takes two arguments a and b and returns two values x and y. The function header def foo(a,b): contains the function signature foo(a,b), which consists of the function name, along with its parameters. 

The y data of the ECDF go from 1/n to 1 in equally spaced increments. You can construct this using np.arange(). 
Remember, however, that the end value in np.arange() is not inclusive. Therefore, np.arange() will need to go from 1 to n+1. Be sure to divide this by n.

 --- code ----
#sns.swarmplot? or help(sns.swarmplot)
def ecdf(data):
    """Compute ECDF for a one-dimensional array of measurements."""
    # Number of data points: n
    n = len(data)

    # x-data for the ECDF: x
    x = np.sort(data)

    # y-data for the ECDF: y
    y = np.arange(1,n+1) / n

    return x, y

# Compute ECDF for versicolor data: x_vers, y_vers
x_vers, y_vers = ecdf(versicolor_petal_length)

# Generate plot
plt.plot(x_vers, y_vers, marker='.', linestyle = 'none')

# Label the axes
plt.xlabel('petal lengths')
plt.ylabel('ECDF')


# Display the plot
plt.show()

---------------------------------------------------------------------

Comparison of ECDFs 
ECDFs also allow you to compare two or more distributions (though plots get cluttered if you have too many). 
Here, you will plot ECDFs for the petal lengths of all three iris species. 

 --- code ----
# Compute ECDFs
x_set, y_set = ecdf(setosa_petal_length)
x_vers, y_vers = ecdf(versicolor_petal_length)
x_virg, y_virg = ecdf(virginica_petal_length)

# Plot all ECDFs on the same plot
_ = plt.plot(x_set, y_set,
marker='.' , linestyle='none')
_ = plt.plot(x_vers, y_vers ,
marker='.' , linestyle='none')
_ = plt.plot(x_virg, y_virg,
marker='.' , linestyle='none')

# Annotate the plot
plt.legend(('setosa', 'versicolor', 'virginica'), loc='lower right')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')

# Display the plot
plt.show()